// function App(){
//   var arr = [20,30,40,50]
//   return(
//     <div>
//       <h1>React Sample Project</h1>
//       <ol>
//         {arr.map((a,index) => <li key={index}>{a}</li>)}
//       </ol>
//     </div>
//   )
// }
// export default App;


// import Students from "./Simple";

// function App(){
//   var fruits=[{fname:"Mango",price:30,qty:300},
//               {fname:"Apple",price:80,qty:500},
//               {fname:"orange",price:60,qty:100}
//   ];
//   return(
//     <div>
//       <table border={"1px"}>
//         <thead>
//           <tr>
//         <th>S.No</th>
//         <th>Fruit Name</th>
//         <th>price</th>
//         <th>qty</th>
//         <th>total</th>
//           </tr>
//         </thead>
//         <tbody>
//           {fruits.map((fruit,index)=>(
//             <tr key={index}>
//               <td>{index+1}</td>
//               <td>{fruit.fname}</td>
//               <td>{fruit.price}</td>
//               <td>{fruit.qty}</td>
//               <td>{fruit.price*fruit.qty}</td>
//             </tr>
//           ))}
//         </tbody>
//       </table>
//       <Students/>
//     </div>

//   )
// }

// //export default Students;

// export default App;

// function App(){
//   return(
//     <div>
//       <h1>React Sample Project</h1>
//       <p>Count : {count()}</p>
//       <p>Add : {add()}</p>
//     </div>
//   )
// }

// function count(){
//   return 10;
// }
// function add(){
//   return 10+20;
// }
// import Students from "./Simple";
// function App(){
//   let a = 10;
//   // const count = () =>{
//   //   a=30;
//   //   console.log("Hello", a);
//   // }
//   return(
//     <div>
//       <h1>React Sample Project</h1>
//       <Sample val ={a}/>
//       {/* <p>Count : {a}</p>
//       <button onClick={()=> count()}>Click Me</button> */}
//     </div>
//   )
// }
// export default App;
// import Products from "./Products";
// import Students from "./Students";
// function App(){
//   let val = 30;
//   let students = [
//       {sName : "abc", age : 23, marks : [40,50,60]},
//       {sName : "efg", age : 23, marks : [46,58,90]},
//       {sName : "hij", age : 23, marks : [98,55,20]}
//   ];
//   let products = [
//     {productId : 1, pName : "Product 1", price : 200, qty : 250},
//     {productId : 2, pName : "Product 2", price : 330, qty : 150},
//     {productId : 3, pName : "Product 3", price : 290, qty : 200}
//   ];
//   return(
//       <div>
//           <h1>React Sample Project</h1>
//           <Students students = {students}/>
//           <Products products = {products}/>
//       </div>
//   )
// }
// export default App;

// import { Component } from "react";
// import LifeCycle from "./LifeCycle";
// class App extends Component {
//   constructor() {
//     super();
//     this.state = {
//       a: 10,
//       show: true
//     }
//   }
//   countInc() {
//     this.setState({ a: this.state.a + 1 });
//   }
//   delContent = ()=>{
//     this.setState({show: !this.state.show});
//   }
//   render() {
//     let myContent;
//     if(this.state.show){
//       myContent = <LifeCycle val = {this.state.a}/>
//     };
//     return (
//       <div>
//         <h1>Class Components Life cycle methods</h1>
//         <button onClick={() => this.countInc()}>INC</button>
//         {myContent}
//         <button type = "button" onClick={this.delContent}>Delete Content</button>
//         {/* <LifeCycle val={this.state.a} /> */}
//       </div>
//     )
//   }
// }
// export default App;
//------------------------------------------------------------------------------
// import { useState } from "react";
// import Sample from "./Sample";

// const App = () =>{
//   //let a =20;
//   const [a,setA] = useState(20);
//   const [count, setCount] = useState(0);
//   const [student,setstudent] = useState({});
//   const decrement = () => setCount(count -1);
//   const increment = () => setCount(count +1);
//   const studentHandler = () => {
//     setstudent({
//       name : "Ali",
//       age : 23
//     });
//   }
//   return(
//     <div className="container">
//       <div className="row">
//         <div className="col">
//         <h1>Sample React Project</h1>
//         <h4>Count: {count}</h4>
//         {count > 0 ? (
//           <button onClick={()=> decrement()}>DEC</button>
//         ):(
//           <button onClick={decrement} disabled>DEC</button>
//         )}
//           <button onClick={increment}>INC</button>
//           <br />
//           <br />
//           {student ? (
//             <div>
//               <h3>Name : {student.name}</h3>
//               <p>Age : {student.age}</p>
//             </div>
//           ):("No Student")}
//           <button onClick={()=> studentHandler()} >Click for Student</button>
//         <button onClick={() => setA(50)}>Click</button>
//         </div>
//       </div>
//     <div className="row">
//       <Sample val = {a}/>
//       </div>
//       </div>
//   )
// }

// export default App;
//------------------------------------------------------------------------------------
// import { useState } from "react"
// const App = () => {
//   // State to manage the list of users
//   const [users, setUsers] = useState([
//     { id: 1, name: 'john wick', email: 'john@example.example'},
//     { id: 2, name: 'jake smtih', email: 'jake@example.example'},

//   ]);

//   // State to manage form iniput for new or editing user
//   const [newUser, setNewUser] = useState({id: '', name: '', email: ''});

//   // State to track if the form is in edit mode 
//   const [isEditing, setIsEditing] = useState(false);

//   //Handle form input change
//   const handleInputChange = (e) => {
//     const { name, value } = e.target;
//     setNewUser({ ...newUser, [name] : value});
//   };

//   //Add new user 
//   const handleAddUser = (e) => {
//     e.preventDefault();
//     if (!newUser.name || !newUser.email) return;

//     // Add user with a new unique ID
//     const newUserWithId = { ...newUser, id: users.length +1 };
//     setUsers([...users, newUserWithId]);

//     //Clear the form after adding
//     setNewUser({id: '', name: '', email: ''});
//   };

//   //Edit user: populate the form with user details
//   const handleEditUser = (user) => {
//     setIsEditing(true);
//     setNewUser(user);
//   };

//   // Update user details
//   const handleUpdateUser = (e) => {
//     e.preventDefault();

//     // Update the user in the users array
//     setUsers(users.map(user => (user.id === newUser.id ? newUser : user)));

//     //clear the form and exit editing mode
//     setIsEditing(false);
//     setNewUser({id : '', name: '', email: ''});
//   };

//   //Delet user
//   const handelDeleteUser = (id) => {
//     //Remove user from the list based on ID
//     setUsers(users.filter(user => user.id !== id));
//   };

//   return (
//     <div className="container">
//       <h1>User Management</h1>
//       {/* From to add or edit users */}
//       <form onSubmit={isEditing ? handleUpdateUser : handleAddUser}>
//         <div>
//           <label>Name : </label>
//           <input 
//             type="text"
//             name="name"
//             value = {newUser.name}
//             onChange={handleInputChange}
//             required
//           />
//         </div>
//         <div>
//           <label>Email: </label>
//           <input type="text" 
//                  name = "email"
//                  value={newUser.email}
//                  onChange={handleInputChange}
//                  required
//           />
//         </div>
//         <button type = "Submit">
//           {isEditing ? 'Update User' : 'Add User'}
//         </button>
//       </form>

//       {/* Display the list of users */}
//       <h2>Users List</h2>
//       <ul>
//         {users.map((user)=>(
//           <li key={user.id}>
//             {user.name}({user.email})
//             <button onClick={() => handleEditUser(user)}>Edit</button>
//             <button onClick={()=> handelDeleteUser(user.id)}>Delete</button>
//           </li>
//         ))}
//       </ul>
//     </div>
//   );

// };
// export default App;
// -----------------------------------------------------------------------------------
import { useEffect } from "react";
import { useState } from "react"; 
const App = () => {
  const [count, setCount] = useState(0);
  useEffect (() => {
    setTimeout(() => {
      setCount(count + 1);
    },1000)
      
    })
    return(
      <div className="container">
        <header className="row">
          <div className="col">
            <h1>App React Component</h1>
            <h4>Count : {count}</h4>
          </div>
        </header>
      </div>
    )
}
export default App; 
-----------------------------------------------------
import { useEffect } from "react";
import { useState } from "react"; 

const App = () => {
  const [count, setCount] = useState(0);
  const [calculation, setCalculation] = useState(0);

  useEffect(()=>{
    setCalculation(()=> count * 2);

  },[count]);
  return(
    <div className="container">
      <header className="row">
        <div className="col">
          <h1>App React Components</h1>
          <p>
            Count: {count}, Calculation: {calculation}
          </p>
          <button onClick={()=>setCount(count +1)}>Increment</button>
        </div>
      </header>
    </div>
  );
}
export default App; 
-----------------------------------------------------------------------------
import { useState, useEffect } from "react";

const App = () => {
  const [count, setCount] = useState(0);

  useEffect(()=>{
    const intervalId = setInterval(()=>{
      setCount((prevCount)=> prevCount +1);
    },1000);
    //Effect clean up
    return () => clearInterval(intervalId);
  },[]);
  return(
    <div className="container">
      <header className="row">
        <div className="col">
          <h1>Counter: {count}</h1>
        </div>
      </header>
    </div>
  );
}
export default App; 
-----------------------------------------------------------------------------
DISPALYING TIME : 

import { useEffect } from "react";
import { useState } from "react";
const App = () => {
  const[time, setTime] = useState(new Date());
  useEffect(()=>{
    const intervelID = setInterval(()=>{
      setTime(new Date());
    },1000);
    return () => clearInterval(intervelID);
  },[])
  return(
    <div className="container">
      <header className="row">
        <div className="col">
          <h1>Time : {time.toLocaleString()}</h1>
        </div>
      </header>
    </div>
  )
}
----------------------------------------------------------------------------------------------------------------------------------------------------------
export default App;
import { useEffect } from "react";
import { useState } from "react";
const App = () => {
  const[time, setTime] = useState(new Date());
  useEffect(()=>{
    const intervelID = setInterval(()=>{
      setTime(new Date());
    },1000);
    return () => clearInterval(intervelID);
  },[])
  return(
    <div className="container">
      <header className="row">
        <div className="col">
          <h1>Time : {time.toLocaleString()}</h1>
        </div>
      </header>
    </div>
  )
}

export default App;
----------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------
useRef (extra points which are not in pdf)
-- --- ------  -- -----  ----- ---- ---- ---- 

  const refContainer = useRef(initailValue);

  initailValue : The initailValue you want the ref object to have.

  Returns : An object with a .current property directly without causing a re-render.

  Key Use Cases for useRef:
    Accessing  DOM Elements.
    Sorting mutable values that persist across renders (like timeres or interval IDs).
    Avoiding rerenders when a mutable value changes, since updating a ref dosen't cause a component to re-render.
  
  Difference b/w useRef and useState:
    useState: Causes the component to re-render whenever the state changes.
    useRef : Strores value that persist across renders without causing re-renders when changed.

  When to use useRef : 
    To hold a refernce to a dom element.
    To store mutable values that don't need to cause a rerender(like timers, intervals, or counters).
    To persist values across renders without triggering a re-render.


----------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------

Web page
  A web paege is a representation of a document that is actually located at a website.
  The web pages also contains other resources such as stylesheets, scripts and images for resentation. Users may be able to 
  navigate to other pages through hypretext links

Web browser 
  A Web browser is a software program that allows a user to locate, access, and display web pages. 
  Browser transelate webpages and websites delivered using Hypretext Transfer Protocol(HTTP) into human-readable content.

Web server
  in simple terms, a web server is a piece of software that stores, processes, and delivers website files to web browsers.

Website 
  A Website is a collection of publicly accessible, interlinked webpages that shares a single domain name. websites are hosted 
  on servers, and requires a web browser such as chrome,etc..,
  ----------------------------------------------------------------------------------------------------------------------------------------------------------
  ----------------------------------------------------------------------------------------------------------------------------------------------------------
what is the difference between state and props ? 
ans : 

Life cycle hooks ?
ans : 
----------------------------------------------------------------------------------------------------------------------------------------------------------
  ----------------------------------------------------------------------------------------------------------------------------------------------------------

import { useState } from 'react';

const App = () => {
  const [startTime, setStartTime] = useState(null);
  const [currentTime, setCurrentTime] = useState(null);
  const [intervalId, setIntervalId] = useState(null);
  const [timeDifference, setTimeDifference] = useState(null);

  // Start the timer
  const handleStart = () => {
    const now = new Date();
    if (!intervalId) {
      setStartTime(now);
      setCurrentTime(now);

      const id = setInterval(() => {
        setCurrentTime(new Date());
      }, 1000);

      setIntervalId(id); // Corrected: now storing the interval ID properly
    }
  };

  // Stop the timer and calculate the difference
  const handleStop = () => {
    if (intervalId) {
      clearInterval(intervalId);
      setIntervalId(null);

      const endTime = new Date();
      const diff = calculateTimeDifference(startTime, endTime);
      setTimeDifference(diff);
    }
  };

  // Function to calculate the time difference
  const calculateTimeDifference = (start, end) => {
    const diffInMs = end - start;
    const diffInSeconds = Math.floor(diffInMs / 1000);

    const hours = Math.floor(diffInSeconds / 3600);
    const minutes = Math.floor((diffInSeconds % 3600) / 60);
    const seconds = diffInSeconds % 60;

    return { hours, minutes, seconds };
  };

  return (
    <div style={{ textAlign: 'center', marginTop: '50px' }}>
      <h1>Start/Stop Timer</h1>

      {startTime && currentTime && (
        <h2>
          Current Time: {currentTime.toLocaleTimeString()}<br />
        </h2>
      )}

      <button onClick={handleStart} disabled={intervalId}>
        Start
      </button>
      <button onClick={handleStop} disabled={!intervalId}>
        Stop
      </button>

      {timeDifference && (
        <div>
          <h3>Time Difference:</h3>
          <p>
            {timeDifference.hours} hours, {timeDifference.minutes} minutes,{' '}
            {timeDifference.seconds} seconds
          </p>
        </div>
      )}
    </div>
  );
};

export default App;
----------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------
timer example : ->

import { useState, useRef } from "react";

const App = () =>{
  const [count, setCount] = useState(0);
  const timerRef = useRef(null); // Use ref to store the timer ID
  const startTimer = () =>{
    if (!timerRef.current){
      timerRef.current = setInterval(()=>{
        setCount((prevCount)=>prevCount +1);
      }, 1000);
    }
  };
  const stopTimer = () => {
    clearInterval(timerRef.current); // clear the timer
    timerRef.current = null; //Reset the ref
  };
  return (
    <div>
      <h1>Count: {count}</h1>
      <button onClick={startTimer}>Start</button>
      <button onClick={stopTimer}>Stop</button>
    </div>
  )

}
export default App;
----------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------
import { useState, useRef } from "react";

const App = () =>{
  const [count, setCount] = useState(0);
  const timerRef = useRef(null); // Use ref to store the timer ID
  const startTimer = () =>{
    if (!timerRef.current){
      timerRef.current = setInterval(()=>{
        setCount((prevCount)=>prevCount +1);
      }, 1000);
    }
  };
  const stopTimer = () => {
    clearInterval(timerRef.current); // clear the timer
    timerRef.current = null; //Reset the ref
  };
  return (
    <div>
      <h1>Count: {count}</h1>
      <button onClick={startTimer}>Start</button>
      <button onClick={stopTimer}>Stop</button>
    </div>
  )

}
export default App;
----------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------
To do program :
import { useReducer, useEffect } from "react"
const initialTodos = [
  {
    id: 1,
    title: "To do 1",
    complete: false
  },
  {
    id: 2,
    title: "To do 2",
    complete: true
  }
];
const reducer = (state, action) => {
  switch (action.type) {
    case "COMPLETE":
      return state.map((todo) => {
        if (todo.id === action.id) {
          return {...todo, complete : !todo.complete };
        } else {
          return todo;
        }
      });
    default: 
      return state;
  }
};
export const App = () => {
  const [todos, dispatch] =
    useReducer(reducer, initialTodos);
  const handleComplete = (todo) => {
    dispatch({ type: "COMPLETE", id: todo.id });
  }
  useEffect(() => {
    console.log(todos);
  });
  return (
    <>
      {todos.map((todo) => (
        <div key={todo.id}>
          <label>
            <input type="checkbox"
              checked={todo.complete}
              onChange={() => handleComplete(todo)}
            />
            {todo.title}
          </label>
        </div>
      ))}
    </>
  )
};

export default App;
----------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------

// import { BrowserRouter } from "react-router-dom"
// import 'bootstrap/dist/css/bootstrap.min.css';
// import 'bootstrap/dist/js/bootstrap.bundle.min';


// const App = () => {
//   return (
//     <BrowserRouter>
//       <div className="container">
//         <div className="row">
//           <div className="col">
//             <h1>Sample Routing App</h1>
//           </div>
//         </div>
//         <nav className="row navbar-expand-lg bg-body-tertiary">
//           <div className="container-fluid">
//             <a className="navbar-brand" >Navbar</a>
//             <button className="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
//               <span className="navbar-toggler-icon"></span>
//             </button>
//             <div className="collapse navbar-collapse" id="navbarNav">
//               <ul className="navbar-nav">
//                 <li className="nav-item">
//                   <a className="nav-link active" aria-current="page" >Home</a>
//                 </li>
//                 <li className="nav-item"> <a className="nav-link" >Products</a>
//                 </li>
//                 <li className="nav-item">
//                   <a className="nav-link" >User</a>
//                 </li>
//                 <li className="nav-item">
//                   <a className="nav-link disabled" aria-disabled="true">Register</a>
//                 </li>
//               </ul>
//             </div>
//           </div>
//         </nav>
//       </div>
//     </BrowserRouter>
//   )
// }

// export default App;

console.log("Hello, JavaScript in Node.js!");
----------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------

